{-
the core language grammar
programs: program -> sc[1]; ... ; sc[n] (n > 1)
supercombinators: sc -> var var1 ... varn = expr (n >= 0)
expressions:
          expr  -> expr aexpr                 (application)
                  | expr1 binop expr2         (infix binary operation)
                  | let defns in expr         (local definition)
                  | letrec defns in expr      (local recursive definition)
                  | case expr of alts         (case expression)
                  | \var1 ... varn . expr     (lambda abstraction)
                  | aexpr                     (atomic expression)

          aexpr -> var                        (variable)
                  | num                       (number)
                  | Pack {num, num}           (constructor)
                  | ( expr )                  (parenthesised expression)

definitions:
          defns -> defn1; ... ; defnn (n >= 1)
          defn -> var = expr

alternatives:
          alts -> alt1; ... ; altn
          alt -> <num> var1 .. varn -> expr

binary operators:
          binop -> arithop | relop | boolop
          arithop -> + | - | * | /
          relop -> < | <= | == | ~= | >= | >
          boolop -> & | |

variables:
          var -> alpha varch1 ... varchn
          alpha -> an alphabetic char
          varch -> alpha | digit | _

numbers: num -> digit1 ... digitn

a core language, is just a list of supercombinators
example:
main = double 21;
double x = x + x
[
  ("main", [], (EAp (EVar "double") (ENum 21))),
  ("double"), ["x"], (EAp (EAp (EVar "+") (EVar "x")) (EVar "x"))
]
a supercombinator definition contains the name of the supercombinator,
its argument and its body
-}
